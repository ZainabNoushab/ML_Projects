# -*- coding: utf-8 -*-
"""Titanic_Survival_Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cohHsq34UaqbvKjyg4hXExhEZY_pKb1o

#Importing Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# Data Collection and Pre-Processing"""

# loading the dataset from csv file to Pandas DataFrame
titanic_data = pd.read_csv('/content/train.csv')

titanic_data.head() # printing first 5 rows of the data

titanic_data.shape # number of rows and columns

titanic_data.info() # getting some info about the data

titanic_data.isnull().sum() # checking the number of missing values

"""## Handling the Missing Values"""

titanic_data = titanic_data.drop(columns='Cabin', axis=1) # dropping the 'Cabin' column
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True) # filling missing values with the mean value

print(titanic_data['Embarked'].mode()[0])

titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True) # filling missing values with the most frequent value

titanic_data.isnull().sum() # checking the number of missing values again

"""# Data Analysis"""

titanic_data.describe() # getting statistical summary of the data

titanic_data['Survived'].value_counts() # checking how many survived and not survived

"""# Data Visualization"""

sns.set()
sns.countplot(x='Survived', data = titanic_data) # countplot for survived column

titanic_data['Sex'].value_counts() # checking how many male and female

sns.set()
sns.countplot(x='Sex', data = titanic_data) # countplot for sex column

sns.countplot(x='Sex', hue='Survived', data = titanic_data) # countplot for sex column with hue survived

sns.countplot(x='Pclass', data = titanic_data) # count plot of classes

sns.countplot(x='Pclass', hue='Survived', data = titanic_data) # countplot of Pclass and survived

"""# Encoding the Categorical Column"""

titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True) # replacing categorical values with numerical values

titanic_data.head()

"""# Separating Features and Targets"""

X = titanic_data.drop(columns = ['PassengerId','Name','Ticket','Survived'], axis = 1)
Y = titanic_data['Survived']

X.head()

Y.head()

"""#Splitting Training and Testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

print(Y.shape, Y_train.shape, Y_test.shape)

"""# Model Training

## Logistic Regression
"""

model = LogisticRegression()

model.fit(X_train, Y_train) # training the model

"""# Model Evaluation

## Accuracy Score
"""

X_train_pediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_pediction)

print(X_train_pediction)

print('Accuracy score of training data:', training_data_accuracy)

X_test_pediction = model.predict(X_test)
testing_data_accuracy = accuracy_score(Y_test, X_test_pediction)

print(X_test_pediction)

print('Accuracy score of testing data:', testing_data_accuracy)